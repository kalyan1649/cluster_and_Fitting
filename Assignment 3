import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.optimize import curve_fit
from scipy.stats import linregress
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler


dataset = pd.read_csv("cluster.csv")

cluster_indi_codes = ["IQ.CPA.PUBS.XQ", "AG.LND.ARBL.ZS"]
cluster_years = ["2006", "2019"]


def data_frame_extracted(cluster_indi_codes, cluster_years):
    """ This function retrieves the data for a specific year and indicator code from the dataset, taking two arguments: `cluster_indi_codes` and `cluster_years'. After that, it returns a list of data frames and removes a few columns from the dataset to produce a new data frame."""
    public_sector = dataset[dataset["Indicator Code"] == cluster_indi_codes[0]]
    arable_land = dataset[dataset["Indicator Code"] == cluster_indi_codes[1]]
    # fodata
    public_sector = public_sector.drop(
        ["Country Code", "Indicator Name", "Indicator Code"], axis=1).set_index("Country Name")
    arable_land = arable_land.drop(
        ["Country Code", "Indicator Name", "Indicator Code"], axis=1).set_index("Country Name")
    dfs = []
    for year in cluster_years:
        public_ = public_sector[year]
        arable_ = arable_land[year]
        data_frame = pd.DataFrame(
            {"CPIA public sector management ": public_, "Arable land": arable_})
        df = data_frame.dropna(axis=0)
        dfs.append(df)

    return dfs
dfs_cluster = data_frame_extracted(cluster_indi_codes, cluster_years)




def clustering(data_frames):
    """
This function uses the k-means method to cluster a list of dataframes. The elbow method is used by the function to determine the ideal number of clusters after standard scaling the data. The clusters and their centroids are then plotted on the original data once the k-means algorithm has been fitted to the dataset. 
"""
    year = "2006"
    for df in data_frames:
        x = df.values
        scaler = StandardScaler()
        x_scaled = scaler.fit_transform(x)

        # Finding the optimum number of clusters
        wcss = []
        for i in range(1, 11):
            kmeans = KMeans(n_clusters=i, init='k-means++',
                            max_iter=300, n_init=10, random_state=42)
            kmeans.fit(x_scaled)
            wcss.append(kmeans.inertia_)

        # Plotting the elbow graph
        plt.plot(range(1, 11), wcss)
        plt.title('The Elbow Method')
        plt.xlabel('Number of clusters')
        plt.ylabel('WCSS')
        plt.show()
